generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum PlatformForJwt {
  WEB
  MOB_IOS
  MOB_ANDROID

  @@map("platform_for_jwt")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum Review {
  VERY_BAD
  BAD
  NORMAL
  GOOD
  VERY_GOOD

  @@map("emotion")
}

enum LegalDocumentType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE

  @@map("legal_document_type")
}

model User {
  id   Int    @id @default(autoincrement())
  uuid String @map("uuid") @db.Uuid

  email     String   @unique @db.VarChar(255)
  userName  String   @map("user_name") @db.VarChar(255)
  birthDate DateTime @map("birth_date") @db.Timestamptz()
  gender    Gender
  firstName String   @map("first_name") @db.VarChar(255)
  lastName  String   @map("last_name") @db.VarChar(255)

  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  profileImagePath String?  @map("profile_image_path") @db.VarChar(2047)

  userIdentity         UserIdentity?
  feedbacks            Feedback[]
  refreshTokens        RefreshToken[]
  recoverPasswords     RecoverPassword[]
  accountVerifications AccountVerification[]
  resetPasswords       ResetPassword[]

  @@index([email])
  @@index([uuid], type: BTree)
  @@map("users")
}

model UserIdentity {
  id                Int     @id @default(autoincrement())
  isAccountVerified Boolean @default(false) @map("is_account_verified")
  password          String  @map("password") @db.VarChar(255)
  strictMode        Boolean @default(false) @map("strict_mode")
  isBlocked         Boolean @default(false) @map("is_blocked") // this property can be removed by user
  isLocked          Boolean @default(false) @map("is_locked") // this property can only be removed by admin
  userId            Int     @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("user_identitites")
}

model RefreshToken {
  id        Int            @id @default(autoincrement())
  userId    Int            @map("user_id")
  token     String
  sub       String
  iss       String
  platform  PlatformForJwt
  exp       String
  jti       String         @unique @db.Uuid()
  iat       String
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@index([jti], type: BTree)
  @@map("refresh_tokens")
}

model AccountVerification {
  id            Int       @id @default(autoincrement())
  securityToken String    @map("security_token")
  jti           String    @unique @db.Uuid()
  userId        Int       @map("user_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()

  acountVerificationAttemptCount AccountVerificationAttemptCount?
  user                           User                             @relation(fields: [userId], references: [id])

  @@map("account_verifications")
}

/// This database will be for checking for too many requests if count is {x} and 
/// {some_amount} of time is not passed yet by checking created_at other insert will be blocked
/// after successfull verification all column will be deleted
model AccountVerificationAttemptCount {
  id                          Int       @id @default(autoincrement())
  count                       Int       @default(0) @db.SmallInt
  countIncreaseLastUpdateDate DateTime? @map("count_increase_last_update_date") @db.Timestamptz()
  accountVerificationId       Int       @unique @map("account_verification_id")
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt                   DateTime? @map("deleted_at") @db.Timestamptz()

  accountVerification AccountVerification @relation(fields: [accountVerificationId], references: [id])

  @@map("account_verifications_attempt_count")
}

model RecoverPassword {
  id            Int       @id @default(autoincrement())
  securityToken String    @map("security_token")
  jti           String    @unique @db.Uuid()
  userId        Int       @map("user_id")
  newPassword   String    @map("new_password") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()

  recoverPasswordAttemptCount RecoverPasswordAttemptCount?
  user                        User                         @relation(fields: [userId], references: [id])

  @@map("recover_passwords")
}

/// Same logic as account verification
/// for more info see table description found in account_verifications_attempt_count
model RecoverPasswordAttemptCount {
  id                          Int       @id @default(autoincrement())
  count                       Int       @default(0) @db.SmallInt
  countIncreaseLastUpdateDate DateTime? @map("count_increase_last_update_date") @db.Timestamptz()
  recoverPasswordId           Int       @unique @map("recover_password_id")
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt                   DateTime? @map("deleted_at") @db.Timestamptz()

  recoverPassword RecoverPassword @relation(fields: [recoverPasswordId], references: [id])

  @@map("recover_passwords_attempt_count")
}

model ResetPassword {
  id            Int       @id @default(autoincrement())
  securityToken String    @map("security_token")
  jti           String    @unique @db.Uuid()
  userId        Int       @map("user_id")
  newPassword   String    @map("new_password") @db.VarChar(255)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  user                      User                       @relation(fields: [userId], references: [id])
  resetPasswordAttemptCount ResetPasswordAttemptCount?

  @@map("reset_passwords")
}

model ResetPasswordAttemptCount {
  id                          Int       @id @default(autoincrement())
  count                       Int       @default(0) @db.SmallInt
  countIncreaseLastUpdateDate DateTime? @map("count_increase_last_update_date") @db.Timestamptz()
  resetPasswordId             Int       @unique @map("recover_password_id")
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt                   DateTime? @map("deleted_at") @db.Timestamptz()

  resetPassword ResetPassword @relation(fields: [resetPasswordId], references: [id])

  @@map("reset_passwords_attempt_count")
}

model LegalDocument {
  id        Int               @id @default(autoincrement())
  title     String            @db.VarChar(255)
  type      LegalDocumentType @unique
  updatedAt DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz()

  paragraphs LegalDocumentParagraph[]

  @@map("legal_documents")
}

model LegalDocumentParagraph {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  index     Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  legalDocument   LegalDocument @relation(fields: [legalDocumentId], references: [id])
  legalDocumentId Int           @map("legal_document_id")

  @@map("legal_document_paragraphs")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  review    Review
  images    String[]
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model FileStructure {
  id          Int     @id @default(autoincrement())
  path        String
  title       String  @db.VarChar(255)
  sizeInBytes BigInt? @map("size_in_bytes") // for folders this will be hard
  depth       Int // depth is on which level is folder/file from root level
  isFile      Boolean @map("is_file") // if false then is folder (boolean is fastest)
  mimeType    String? @map("mime_type")

  // for recursive file structure
  parentId Int?            @map("parent_id")
  parent   FileStructure?  @relation("parentId", fields: [parentId], references: [id])
  children FileStructure[] @relation("parentId")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
}

// Select top 40 mime type for validation
// for programming and everything elese front will take care

//! Top mimetypes
// text/plain: Plain text files.
// text/markdown: markdowns
// text/html: HTML documents.
// application/json: JSON data.
// application/xml: XML documents.
// application/pdf: Portable Document Format (PDF) files.
// image/jpeg: JPEG images.
// image/png: PNG images.
// image/gif: GIF images.
// audio/mpeg: MP3 audio files.
// audio/wav: WAV audio files.
// video/mp4: MP4 video files.
// video/mpeg: MPEG video files.
// application/javascript: JavaScript files.
// application/xhtml+xml: XHTML documents.
// application/rss+xml: RSS feeds.
// application/zip: ZIP archive files.
// application/x-www-form-urlencoded: Form data submitted via HTTP POST.
// multipart/form-data: Form data, often used for file uploads.
// application/octet-stream: Binary data with no specific MIME type.
// application/vnd.ms-excel: Microsoft Excel files.
// application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: Excel Open XML Workbook files.
// application/msword: Microsoft Word documents.
// application/vnd.openxmlformats-officedocument.wordprocessingml.document: Word Open XML Document files.
// application/vnd.ms-powerpoint: Microsoft PowerPoint files.
// application/vnd.openxmlformats-officedocument.presentationml.presentation: PowerPoint Open XML Presentation files.
// text/css: Cascading Style Sheets (CSS).
// application/ogg: Ogg multimedia container.
// audio/ogg: Ogg audio files.
// video/ogg: Ogg video files.
// application/rtf: Rich Text Format (RTF) files.
// application/sql: SQL database files.
// application/xhtml+xml: Extended Hypertext Markup Language (XHTML) files.
// application/x-shockwave-flash: Adobe Flash files.
// application/java-archive: Java Archive (JAR) files.
// application/vnd.android.package-archive: Android Package files (APK).
// application/rdf+xml: Resource Description Framework (RDF) files.
// application/ld+json: JSON-LD (JSON Linked Data).
// image/bmp: Windows Bitmap image.
// image/tiff: Tagged Image File Format (TIFF) images.
// audio/wave: Waveform Audio File Format (WAV) audio files.
// audio/midi: MIDI audio files.
// video/quicktime: QuickTime video files.
// video/x-msvideo: AVI (Audio Video Interleave) files.
// application/vnd.visio: Microsoft Visio files.
// application/x-rar-compressed: RAR archive files.
// application/x-tar: Tar archive files.
// application/gzip: Gzip compressed files.
// application/x-7z-compressed: 7-Zip archive files.
// application/vnd.openxmlformats-officedocument.presentationml.slideshow: PowerPoint Open XML Presentation files (slideshow).
// application/vnd.oasis.opendocument.text: OpenDocument Text files.

//! top 30 for images
// image/jpeg: JPEG images.
// image/png: PNG images.
// image/gif: GIF images.
// image/bmp: Windows Bitmap image.
// image/tiff: Tagged Image File Format (TIFF) images.
// image/webp: WebP images.
// image/svg+xml: Scalable Vector Graphics (SVG) images.
// image/x-icon: Icon files.
// image/vnd.microsoft.icon: Microsoft icon files.
// image/jp2: JPEG 2000 images.
// image/vnd.djvu: DjVu images.
// image/x-xcf: GIMP image files.
// image/x-ms-bmp: BMP image files.
// image/heic: High-Efficiency Image Format (HEIC) images.
// image/heif: High-Efficiency Image Format (HEIF) images.
// image/x-exr: OpenEXR images.
// image/x-portable-anymap: Portable anyMap (PNM) images.
// image/x-portable-bitmap: Portable Bitmap (PBM) images.
// image/x-portable-graymap: Portable Graymap (PGM) images.
// image/x-portable-pixmap: Portable Pixmap (PPM) images.
// image/x-xbitmap: X BitMap (XBM) images.
// image/x-xpixmap: X PixMap (XPM) images.
// image/x-xwindowdump: X Window Dump (XWD) images.
// image/cgm: Computer Graphics Metafile (CGM) images.
// image/ief: Image Exchange Format (IEF) images.
// image/ktx: Khronos Texture (KTX) images.
// image/vnd.wap.wbmp: Wireless Bitmap (WBMP) images.
// image/fits: Flexible Image Transport System (FITS) images.
// image/jxr: JPEG XR images.
// image/hdr: Radiance High Dynamic Range (HDR) images.

//! top 10 on video
// video/mp4: MP4 video files.
// video/mpeg: MPEG video files.
// video/quicktime: QuickTime video files.
// video/x-msvideo: AVI (Audio Video Interleave) files.
// video/x-flv: Flash video files.
// video/x-matroska: Matroska multimedia container files.
// video/webm: WebM video files.
// video/3gpp: 3GP video files.
// video/ogg: Ogg video files.
// video/x-ms-wmv: Windows Media Video (WMV) files.

//! top 20 programming languages
// JavaScript (.js): application/javascript or text/javascript
// Python (.py): text/x-python
// Java (.java): text/x-java-source or text/plain
// C++ (.cpp): text/x-c++src or text/plain
// C# (.cs): text/x-csharp
// PHP (.php): text/x-php
// TypeScript (.ts): application/typescript or video/vnd.dlna.mpeg-tts
// Ruby (.rb): application/x-ruby
// Swift (.swift): text/x-swift
// Go (.go): text/x-go
// HTML (.html): text/html
// CSS (.css): text/css
// Shell (.sh): application/x-shellscript or text/plain
// Kotlin (.kt): text/x-kotlin
// Rust (.rs): text/rust
// Objective-C (.m): text/x-objective-c
// Perl (.pl): application/x-perl
// Scala (.scala): text/x-scala
// Dart (.dart): application/dart
// R (.r): application/R

//! top 20 programming languages and their corresponding library mimetypes
// JavaScript (Node.js):

// package.json: application/json
// yarn.lock or package-lock.json: application/json
// Python (pip):

// requirements.txt: text/plain
// Pipfile: application/x-toml
// Pipfile.lock: application/json
// Java (Maven):

// pom.xml: application/xml
// C++ (CMake):

// CMakeLists.txt: text/plain
// C# (.NET):

// *.csproj: application/xml
// PHP (Composer):

// composer.json: application/json
// composer.lock: application/json
// TypeScript (npm/Yarn):

// package.json: application/json
// yarn.lock or package-lock.json: application/json
// Ruby (Bundler):

// Gemfile: text/plain
// Gemfile.lock: text/plain
// Swift (Swift Package Manager):

// Package.swift: text/x-swift
// Go (Go Modules):

// go.mod: text/plain
// go.sum: text/plain
// HTML/CSS (Web development):

// package.json (for build tools like Webpack): application/json
// Rust (Cargo):

// Cargo.toml: text/x-toml
// Cargo.lock: text/plain
