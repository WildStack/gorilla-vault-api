generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum PlatformForJwt {
  WEB
  MOB_IOS
  MOB_ANDROID

  @@map("platform_for_jwt")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum Review {
  VERY_BAD
  BAD
  NORMAL
  GOOD
  VERY_GOOD

  @@map("emotion")
}

enum LegalDocumentType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE

  @@map("legal_document_type")
}

/// This enum contains top mimetypes in everywhere
enum FileMimeType {
  TEXT_PLAIN
  TEXT_MARKDOWN

  APPLICATION_JSON
  APPLICATION_XML
  APPLICATION_PDF

  IMAGE_JPG
  IMAGE_PNG
  IMAGE_GIF
  IMAGE_WEBP
  IMAGE_BMP

  AUDIO_MPEG
  AUDIO_WAV

  VIDEO_MP4
  VIDEO_MPEG
  VIDEO_WEBM
  VIDEO_QUICKTIME

  @@map("file_mime_type")
}

model User {
  id   Int    @id @default(autoincrement())
  uuid String @map("uuid") @db.Uuid

  email     String   @unique @db.VarChar(255)
  userName  String   @map("user_name") @db.VarChar(255)
  birthDate DateTime @map("birth_date") @db.Timestamptz()
  gender    Gender
  firstName String   @map("first_name") @db.VarChar(255)
  lastName  String   @map("last_name") @db.VarChar(255)

  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  profileImagePath String?  @map("profile_image_path") @db.VarChar(2047)

  userIdentity         UserIdentity?
  feedbacks            Feedback[]
  refreshTokens        RefreshToken[]
  recoverPasswords     RecoverPassword[]
  accountVerifications AccountVerification[]
  resetPasswords       ResetPassword[]

  @@index([email])
  @@index([uuid], type: BTree)
  @@map("users")
}

model UserIdentity {
  id                Int     @id @default(autoincrement())
  isAccountVerified Boolean @default(false) @map("is_account_verified")
  password          String  @map("password") @db.VarChar(255)
  strictMode        Boolean @default(false) @map("strict_mode")
  isBlocked         Boolean @default(false) @map("is_blocked") // this property can be removed by user
  isLocked          Boolean @default(false) @map("is_locked") // this property can only be removed by admin
  userId            Int     @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("user_identitites")
}

model RefreshToken {
  id        Int            @id @default(autoincrement())
  userId    Int            @map("user_id")
  token     String
  sub       String
  iss       String
  platform  PlatformForJwt
  exp       String
  jti       String         @unique @db.Uuid()
  iat       String
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@index([jti], type: BTree)
  @@map("refresh_tokens")
}

model AccountVerification {
  id            Int       @id @default(autoincrement())
  securityToken String    @map("security_token")
  jti           String    @unique @db.Uuid()
  userId        Int       @map("user_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()

  acountVerificationAttemptCount AccountVerificationAttemptCount?
  user                           User                             @relation(fields: [userId], references: [id])

  @@map("account_verifications")
}

/// This database will be for checking for too many requests if count is {x} and 
/// {some_amount} of time is not passed yet by checking created_at other insert will be blocked
/// after successfull verification all column will be deleted
model AccountVerificationAttemptCount {
  id                          Int       @id @default(autoincrement())
  count                       Int       @default(0) @db.SmallInt
  countIncreaseLastUpdateDate DateTime? @map("count_increase_last_update_date") @db.Timestamptz()
  accountVerificationId       Int       @unique @map("account_verification_id")
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt                   DateTime? @map("deleted_at") @db.Timestamptz()

  accountVerification AccountVerification @relation(fields: [accountVerificationId], references: [id])

  @@map("account_verifications_attempt_count")
}

model RecoverPassword {
  id            Int       @id @default(autoincrement())
  securityToken String    @map("security_token")
  jti           String    @unique @db.Uuid()
  userId        Int       @map("user_id")
  newPassword   String    @map("new_password") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()

  recoverPasswordAttemptCount RecoverPasswordAttemptCount?
  user                        User                         @relation(fields: [userId], references: [id])

  @@map("recover_passwords")
}

/// Same logic as account verification
/// for more info see table description found in account_verifications_attempt_count
model RecoverPasswordAttemptCount {
  id                          Int       @id @default(autoincrement())
  count                       Int       @default(0) @db.SmallInt
  countIncreaseLastUpdateDate DateTime? @map("count_increase_last_update_date") @db.Timestamptz()
  recoverPasswordId           Int       @unique @map("recover_password_id")
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt                   DateTime? @map("deleted_at") @db.Timestamptz()

  recoverPassword RecoverPassword @relation(fields: [recoverPasswordId], references: [id])

  @@map("recover_passwords_attempt_count")
}

model ResetPassword {
  id            Int       @id @default(autoincrement())
  securityToken String    @map("security_token")
  jti           String    @unique @db.Uuid()
  userId        Int       @map("user_id")
  newPassword   String    @map("new_password") @db.VarChar(255)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  user                      User                       @relation(fields: [userId], references: [id])
  resetPasswordAttemptCount ResetPasswordAttemptCount?

  @@map("reset_passwords")
}

model ResetPasswordAttemptCount {
  id                          Int       @id @default(autoincrement())
  count                       Int       @default(0) @db.SmallInt
  countIncreaseLastUpdateDate DateTime? @map("count_increase_last_update_date") @db.Timestamptz()
  resetPasswordId             Int       @unique @map("recover_password_id")
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  deletedAt                   DateTime? @map("deleted_at") @db.Timestamptz()

  resetPassword ResetPassword @relation(fields: [resetPasswordId], references: [id])

  @@map("reset_passwords_attempt_count")
}

model LegalDocument {
  id        Int               @id @default(autoincrement())
  title     String            @db.VarChar(255)
  type      LegalDocumentType @unique
  updatedAt DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz()

  paragraphs LegalDocumentParagraph[]

  @@map("legal_documents")
}

model LegalDocumentParagraph {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  index     Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  legalDocument   LegalDocument @relation(fields: [legalDocumentId], references: [id])
  legalDocumentId Int           @map("legal_document_id")

  @@map("legal_document_paragraphs")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  review    Review
  images    String[]
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model FileStructure {
  id     Int     @id @default(autoincrement())
  path   String
  title  String  @db.VarChar(255)
  isFile Boolean @map("is_file") // if false then is folder (boolean is fastest)
  depth  Int // one of the most important prop, depth is on which level is folder/file from root level

  sizeInBytes BigInt?       @map("size_in_bytes") // for folders this will be added later/just in time
  mimeTypeRaw String?       @map("mime_type_raw") // mimetype just as string
  mimeType    FileMimeType? @map("mime_type") // mimetype enum for most common mimetypes

  // for recursive file structure
  parentId Int?            @map("parent_id")
  parent   FileStructure?  @relation("parentId", fields: [parentId], references: [id])
  children FileStructure[] @relation("parentId")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("file_structure")
}
